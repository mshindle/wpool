package wpool

import "context"

type Task interface {
	Run(ctx context.Context, args interface{}) (interface{}, error)
}

type TaskFunc func(ctx context.Context, args interface{}) (interface{}, error)

func (t TaskFunc) Run(ctx context.Context, args interface{}) (interface{}, error) {
	return t(ctx, args)
}

// Descriptor contains attributes and metadata surrounding a job in order to track its
// process through the pool
type Descriptor struct {
	ID       string
	Type     string
	Metadata map[string]interface{}
}

// Result encapsulates the output generated by a Task associated with a Job.
type Result struct {
	Value      interface{}
	Err        error
	Descriptor Descriptor
}

// Job encapsulates the task run by the WorkerPool. A Job gets queued up, worked, and a Result generated.
type Job struct {
	Descriptor Descriptor
	Task       Task
	Args       interface{}
}

func (j Job) execute(ctx context.Context) Result {
	r := Result{Descriptor: j.Descriptor}
	r.Value, r.Err = j.Task.Run(ctx, j.Args)
	return r
}
